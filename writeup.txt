We are using 3 slip days on this assignment (Proxy).

COMP 321 Project 6: Web Proxy

<Lily Gao, qg8; Michelle Pang yp29>


---(Do not write lines of text that exceed the width of this line.)------------

DESIGN DISCUSSION

Please answer the following questions about the design of your proxy.

1. Describe the steps taken by your proxy to service a single HTTP transaction
   from beginning to end.  (10-14 sentences)
   

2. Did you modify the first line of the request message?  If so, how?
   (1-3 sentences)
   We did modify the first line of the request message. We only passed the part
   of URI after the host (the path name). 


3. Did you add/remove/modify any request headers?  If so, how?  (1-3 sentences)
   We did remove Connection, Keep-Alive, and Proxy-Connection request headers 
   by using strstr function to check if they are in the headers.
   We did add header "Connection: close" for HTTP/1.1 by using strcat function
   to concatenate the string with other headers.


4. How did you forward the response message?  (2-4 sentences)
   We forward the response message by first reading the response line by line
   using rio_readlineb and store them in a buffer. Then, we forward the 
   response message using rio_writen. The response is sent through the same 
   connection when we received connection from client.
   

6. How many threads did your proxy use to implement concurrency?  Explain how
   you chose this number.  (3-6 sentences)
   We used 10 threads to implement concurrency. This thread number allows
   us to gain a good balance on concurrency effect and overhead creation.
   For a clear machine, having less thread number will strongly limit the 
   amount of concurrency. However, having more thread number will cause large
   overhead when creating threads, and thus decrease efficiency. 

7. How did you write to the access log file?  (1-2 sentences)
   We used fwrite and fflush functions to write to the access log file.

8. How do you ensure atomicity when writing to the access log file?
   (1-2 sentences)
   First, fwrite itself is an amotic function, allowing us to ensure atomicity.
   Second, we used mutex to lock the shared resouces, ensuring sequencial 
   write order.

9. When did you open/close the access log file?  (2 sentences)
   We opened the access log file at the beginning of the program, right after
   initializing pthread variables and condition variables.
   We closed the access log file at the end of the program, after cleaning up
   and destroying condition variables.


